// ================================================== DRIVER PROGRAM ======================================================//
using System;
using static System.Console;
using System.Threading;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PD_problem2.BL;
using PD_problem2.gameObject_DL;
using PD_problem2.GameObject_UI;

namespace PD_problem2
{
    class Program
    {
        static void Main(string[] args)
        {
            char[,] dragon = new char[6, 6]
            {
              { ' ',' ',' ',' ',' ',' '},
              { ' ',' ','#','#',' ',' '},
              { ' ',' ','(',')',' ',' '},
              { ' ',' ','(',')',' ',' '},
              { ' ','-','-','-','-',' '},
              { ' ',' ','|','|',' ',' '}
            };


            boundry b = new boundry(new point(0, 0), new point(0, 90), new point(90, 0), new point(90, 90));
            gameObjects g = new gameObjects(dragon, new point(5,5), b, "LeftToRight");
            int count = 0;

            while (true)
            {

                if (count == 10)
                {
                    g.setDirection("Projectile");
                   
                }
              

                Thread.Sleep(500);
                Clear();
              
                g.move();
                g.erase();
                g.draw();

               count++;
            }

            ReadKey();
        }
    }
}
//------------------------------------------------end of driver program------------------------------------------------//

//================================================class game object====================================================//
using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PD_problem2.BL;

namespace PD_problem2.BL
{
    class gameObjects
    {

        private char[,] shape;
        private point startingPoint;
        private boundry premises;
        private string direction;
        
        public char[,] getArray() { return  shape; }
        public void setArray(char [,] shape) { this.shape = shape; }

        public point getStartingPoint() { return startingPoint; }
        public void setstartingPoint(point p) { startingPoint = p; }

        public boundry getPremises() { return premises; }
        public void setpremises(boundry p) { premises = p; }

        public string getDirection() { return direction; }
        public void setDirection(string d) { direction = d; }


        public gameObjects()
        {
            shape = new char[1, 3] ;

            startingPoint = new point();

            direction = "LefttoRight";
        }

        public gameObjects(char[,] shape, point b)
        {
            this.shape = shape;

            startingPoint = b;

    
        }

        public gameObjects(char [,] shap , point p , boundry b , string direction)
        {
            this.shape = shap;
            startingPoint = p;
            premises = b;
            this.direction = direction;
        }



        public void move()
        {
            int count = 1;
            if (direction == "LeftToRight")
            {
                if (startingPoint.getX() + 1 != premises.getbottomRight().getX())
                {
                    startingPoint.setX(startingPoint.getX() + 1);
                }
                count = 0;
            }

            else if (direction == "Righttoleft")
            {
                if (startingPoint.getX() - 1 != premises.gettopLeft().getX())
                {
                    startingPoint.setX(startingPoint.getX() - 1);
                }
                count = 0;
            }
            else if (direction == "patrol")
            {
                if (startingPoint.getX() - 1 != premises.gettopLeft().getX())
                {
                    startingPoint.setX(startingPoint.getX() - 1);
                }
                else
                {
                    direction = "LeftToRight";
                }
                count = 0;
            }
            else if (direction == "projectile")
            {
                if (count < 5)
                {
                    if (startingPoint.getX() + 1 < premises.gettopRight().getX())
                    {
                        startingPoint.setX(startingPoint.getX() + 1);
                        if (startingPoint.getY() - 1 > premises.gettopRight().getY())
                        {
                            startingPoint.setY(startingPoint.getY() - 1);
                        }
                    }
                }
                else if (count < 7)
                {
                    if (startingPoint.getX() + 1 != premises.getbottomRight().getX())
                    {
                        startingPoint.setX(startingPoint.getX() + 1);
                    }
                }
                else if (count < 11)
                {
                    if (startingPoint.getX() + 1 < premises.getbottomRight().getX())
                    {
                        startingPoint.setX(startingPoint.getX() + 1);
                        if (startingPoint.getY() + 1 < premises.getbottomRight().getY())
                        {
                            startingPoint.setY(startingPoint.getY() + 1);
                        }
                    }
                }

            }
            else if (direction == "diagonal")
            {
                if (startingPoint.getX() + 1 < premises.getbottomRight().getX())
                {
                    startingPoint.setX(startingPoint.getX() + 1);
                    if (startingPoint.y + 1 < premises.getbottomRight().y)
                    {
                        startingPoint.setY(startingPoint.getY() + 1);
                    }
                }
                count = 0;
            }
            count++;
        }

        public  void draw()
        {
            int x = startingPoint.getX();
            int y = startingPoint.getY();
            for (int i = 0; i < shape.GetLength(0); i++)
            {
                SetCursorPosition(x , y);
                for (int j = 0; j < shape.GetLength(0); j++)
                {
                    
                    Write(shape[i, j]);
                }
                WriteLine();
                y++;
            }
        }


        public void erase()
        {

            int x = startingPoint.getX();
            int y = startingPoint.getY();
            for (int i = 0; i < shape.GetLength(0); i++)
            {
                SetCursorPosition(x , y);
                for (int j = 0; j < shape.GetLength(0); j++)
                {
                    Write(" ");
                }
                y++;
            }
        }
    }
}
//==============================================================================================================================//

//===========================================class boundary ===============================================================//
using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PD_problem2.BL;
namespace PD_problem2.BL
{
    class boundry
    {
        private point topLeft;
        private point topRight;
        private point bottomLeft;
        private point bottomRight;

        public point gettopLeft() { return topLeft; }
        public void settopLeft(point p) { topLeft = p; }

        public point gettopRight() { return topRight; }
        public void settopRight(point p) { topRight = p; }

        public point getbottomLeft() { return bottomLeft; }
        public void setbottomLeft(point p) { bottomLeft = p; }

        public point getbottomRight() { return bottomRight; }
        public void setbottomRight(point p) { bottomRight = p; }


        public boundry()
        {
            topLeft = new point(0, 0);
            topRight = new point(90, 0);
            bottomLeft = new point(0, 90);
            bottomRight = new point(90, 90);
        }

        public boundry(point topLeft, point topRight, point bottomLeft, point bottomRight)
        {
            this.topLeft = topLeft;
            this.topRight = topRight;
            this.bottomLeft = bottomLeft;
            this.bottomRight = bottomRight;
        }

 
    }
}
============================================================================================================================//

//==================================================class point ============================================================//
using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PD_problem2.BL;

namespace PD_problem2.BL
{
    class point
    {
        public int x;
        public int y;

        public point()
        {
            x = 0;
            y = 0;
        }

        public point(int x , int y )
        {
            this.x = x;
            this.y = y;
        }

        public int getX() { return x; }
        public void setX(int x) { this.x = x; }

        public int getY() { return y; }
        public void setY(int y) { this.y = y; }

        public void setXY(int x , int y)
        {
            this.x = x;
            this.y = y;
        }

    }
}
============================================================================================================================================================