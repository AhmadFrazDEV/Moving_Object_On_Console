//======================MAIN===================
using System;
using static System.Console;
using System.Threading;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PD_problem2.BL;

namespace PD_problem2
{
    class Program
    {
        static void Main(string[] args)
        {
            char[,] dragon = new char[6, 6]
            {
              { ' ','*','*','*','*',' '},
              { ' ',' ','#','#',' ',' '},
              { ' ',' ','(',')',' ',' '},
              { ' ',' ','(',')',' ',' '},
              { ' ','-','-','-','-',' '},
              { ' ',' ','|','|',' ',' '}
            };


            boundry b = new boundry(new point(0, 0), new point(0, 90), new point(90, 0), new point(90, 90));
            gameObjects g = new gameObjects(dragon, new point(2,2), b, "LefttoRight");

            while(true)
            {
                Thread.Sleep(1000);
                Clear();
                g.move();
                Clear();
                g.draw();
                
            }

            ReadKey();
        }
    }
}


//=========================CLASS POINT======================
using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PD_problem2.BL;

namespace PD_problem2.BL
{
    class point
    {
        public int x;
        public int y;

        public point()
        {
            x = 0;
            y = 0;
        }

        public point(int x , int y )
        {
            this.x = x;
            this.y = y;
        }


    }
}


//========================CLASS BOUNDRY=============
using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PD_problem2.BL
{
    class boundry
    {
        public point topLeft;
        public point topRight;
        public point bottomLeft;
        public point bottomRight;

        public boundry()
        {
            //topLeft.x = 0;
            //topLeft.y = 0;

            //topRight.x = 0;
            //topRight.y = 90;

            //bottomLeft.x = 90;
            //bottomLeft.y = 0;

            //bottomRight.x = 90;
            //bottomRight.y = 90;
        }

        public boundry(int x1 , int y1 , int x2 , int y2 , int x3 , int y3 , int x4 , int y4)
        {
            topLeft.x = x1;
            topLeft.y = y1;
            topRight.x = x2;
            topRight.y = y2;
            bottomLeft.x = x3;
            bottomLeft.y = y3;
            bottomRight.x = x4;
            bottomRight.y = x4;
        }

     public boundry(point a , point b , point c , point d)
        {
            topLeft = a;
            topRight = b;
            bottomLeft = c;
            bottomRight = d;
        }
    }
}

//========================CLASS GAMEOBJECT=====================
using System;
using static System.Console;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PD_problem2.BL;

namespace PD_problem2.BL
{
    class gameObjects
    {

        public char[,] shape;
        public point startingPoint;
        public boundry premises;
        public string direction;

        public gameObjects()
        {
            shape = new char[1, 3];

            startingPoint.x = 0;
            startingPoint.y = 0;

            premises.topLeft.x = 0;
            premises.topLeft.y = 0;

            premises.topRight.x = 0;
            premises.topRight.y = 90;

            premises.bottomLeft.x = 90;
            premises.bottomLeft.y = 0;

            premises.bottomRight.x = 90;
            premises.bottomRight.y = 90;

            direction = "LefttoRight";
        }

        public gameObjects(char[,] shape, point b)
        {
            this.shape = shape;

            startingPoint = b;

            SetCursorPosition(startingPoint.y, startingPoint.x);
          
            for (int i = 0; i < 2; i++)
            {
                for (int j = 0; j < 2; j++)
                {
                    Write(shape[i, j]);
                }
            }
        }

        public gameObjects(char [,] shap , point p , boundry b , string direction)
        {
            this.shape = shap;
            startingPoint = p;
            premises = b;
            this.direction = direction;
        }

        public void draw()
        {
            
            for (int i=0; i<shape.GetLength(0); i++)
            {
                
                for (int j=0; j<shape.GetLength(0); j++)
                {
                    SetCursorPosition(j + startingPoint.y,i + startingPoint.x);
                    Write(shape[i,j]);
                }
                WriteLine();
            }
        }

        public void move()
        {
            if(direction == "LefttoRight")
            {
                
                for (int i = 0; i < shape.GetLength(0); i++)
                {

                    for (int j = 0; j < shape.GetLength(0); j++)
                    {
                         SetCursorPosition(j + startingPoint.y, i +  startingPoint.x);
                        
                        Write(shape[i, j]);
                    }
                    startingPoint.y++;
                    WriteLine();
                }
            }
        }
       
    }
}
